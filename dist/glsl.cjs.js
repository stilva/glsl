"use strict";function getCanvas(t,e){const r=Object.assign({antialias:!1},e);if(t instanceof HTMLCanvasElement){const e={width:t.width,height:t.height,antialias:r.antialias};return new Canvas(t,e)}if(Array.isArray(t)){const e={width:t[0],height:t[1],antialias:r.antialias},i=document.createElement("canvas");return new Canvas(i,e)}throw new Error("getCanvas expects an HTMLCanvasElement or an Array [width, height]")}class Canvas{get context(){return this._context}get node(){return this._canvas}get height(){return this._canvas.height}get width(){return this._canvas.width}constructor(t,e){let r=e.width,i=e.height,a=e.antialias;this._canvas=t;try{this._context=t.getContext("webgl",{antialias:a})}catch(t){throw new Error(`Error while getting the context. ${t.message}`)}t.width=r,t.height=i}}const FLOAT_VARIABLES=["uniform1f","uniform2fv","uniform3fv","uniform4fv"];function variableHelper(t,e){const r=asArray(e),i=r.length-1,a=FLOAT_VARIABLES[i];return{name:t,linked:!1,value:r,type:getType(r),location:`${t}Location`,locationType:a}}function textureHelper(t,e,r){return{name:t,index:e,texture:"string"==typeof r?pGetImage(r):Promise.resolve(r),linked:!1}}function asArray(t){return Array.isArray(t)?t:[t]}function pGetImage(t){const e=new Image;return e.crossOrigin="Anonymous",new Promise(r=>{e.addEventListener("load",t=>r(e)),e.src=t})}function getType(t){return 1==t.length?"float":`vec${t.length}`}const PRECISION=["lowp","mediump","highp"];class GLSL{get canvas(){return this._canvas.node}constructor(t,e){this._options=Object.assign({antialias:!1,precision:1},e),this._canvas=getCanvas(t,this._options),this._gl=this._canvas.context,this._gl.viewport(0,0,this._gl.drawingBufferWidth,this._gl.drawingBufferHeight),this._locations={},this._variables={},this._textures={},this._vertex="attribute vec2 a_position;\n\t\tvoid main() {\n\t\t\tgl_Position = vec4(a_position, 0, 1);\n\t\t}",this._initTime=Date.now(),this.addVariable("u_time",0),this.addVariable("u_resolution",[this._canvas.width,this._canvas.height])}addVariable(t,e){if(this._variables.hasOwnProperty(t))throw new Error(`Variable ${t} has already been added to this instance.`);return this._variables[t]=variableHelper(t,e),e=>{const r=this._variables[t],i=r.location,a=r.locationType;this._variables[t].value=e,this._gl[a](this._locations[i],this._variables[t].value)}}addTexture(t,e){if(this._textures.hasOwnProperty(t))throw new Error(`Texture ${t} has already been added to this instance.`);const r=Object.keys(this._textures).length;this._textures[t]=textureHelper(t,r,e)}fragment(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),i=1;i<e;i++)r[i-1]=arguments[i];const a=Array.isArray(t)?t:[t];if(r.length!==a.length-1)throw new Error("The fragment shader provided has an invalid amount of arguments");this._fragment=`precision ${PRECISION[this._options.precision]} float;\n\t\t\n\t\t${stringifyVariables(this._variables)}\n\t\t\n\t\t${stringifyTextures(this._textures)}\n\t\t\n\t\t${a.reduce((t,e,i)=>`${t}${r[i]}${e}`)}`,this._program=setupProgram(this._gl,this._vertex,this._fragment),Object.keys(this._variables).forEach(t=>{if(this._variables[t].linked)return;const e=this._variables[t],r=e.name,i=e.location,a=e.locationType,n=this._gl.getUniformLocation(this._program,r);this._gl[a](n,this._variables[t].value),this._locations[i]=n,this._variables[t].linked=!0}),Object.keys(this._textures).forEach(t=>{if(this._textures[t].linked)return;const e=this._textures[t],r=e.name,i=e.index,a=e.texture,n=createTexture(this._gl,this._program,i+1,r);a.then(t=>{n.apply(t)})})}render(){this._gl.clear(this._gl.COLOR_BUFFER_BIT),this._gl.drawArrays(this._gl.TRIANGLES,0,6);let t=this._variables.u_time,e=t.locationType,r=t.location;this._gl[e](this._locations[r],(Date.now()-this._initTime)/1e3),requestAnimationFrame(t=>this.render())}kill(){this._gl.getExtension("WEBGL_lose_context").loseContext(),this._gl.useProgram(null),this._gl.deleteProgram(this._program)}}function setupProgram(t,e,r){const i=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,i),t.bufferData(t.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]),t.STATIC_DRAW);const a=t.createShader(t.VERTEX_SHADER);t.shaderSource(a,e),t.compileShader(a);const n=t.createShader(t.FRAGMENT_SHADER);t.shaderSource(n,r),t.compileShader(n);const s=t.createProgram();t.attachShader(s,a),t.attachShader(s,n),t.linkProgram(s),t.useProgram(s);const o=t.getAttribLocation(s,"a_position");return t.enableVertexAttribArray(o),t.vertexAttribPointer(o,2,t.FLOAT,!1,0,0),s}function createTexture(t,e,r,i){const a=t.createTexture();t.bindTexture(t.TEXTURE_2D,a),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.uniform1i(t.getUniformLocation(e,i),r);const n=t[`TEXTURE${r}`];return t.activeTexture(n),t.bindTexture(t.TEXTURE_2D,a),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,new ImageData(2,2)),{apply:e=>{t.activeTexture(n),t.bindTexture(t.TEXTURE_2D,a),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e)},texture:a}}function stringifyVariables(t){return Object.keys(t).reduce((e,r)=>`${e}\n\t\tuniform ${t[r].type} ${r};`,"")}function stringifyTextures(t){return Object.keys(t).reduce((t,e)=>`${t}\n\t\tuniform sampler2D ${e};`,"")}module.exports=GLSL;